/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.tables;


import com.technokratos.model.jooq.Keys;
import com.technokratos.model.jooq.Public;
import com.technokratos.model.jooq.enums.AccountRole;
import com.technokratos.model.jooq.enums.AccountState;
import com.technokratos.model.jooq.enums.Gender;
import com.technokratos.model.jooq.tables.records.AccountRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account</code>
     */
    public static final Account ACCOUNT_ENTITY = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>public.account.id</code>.
     */
    public final TableField<AccountRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.account.email</code>.
     */
    public final TableField<AccountRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.account.hash_password</code>.
     */
    public final TableField<AccountRecord, String> HASH_PASSWORD = createField(DSL.name("hash_password"), SQLDataType.VARCHAR(72).nullable(false), this, "");

    /**
     * The column <code>public.account.username</code>.
     */
    public final TableField<AccountRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.account.state</code>.
     */
    public final TableField<AccountRecord, AccountState> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'NOT_CONFIRMED'::account_state", SQLDataType.VARCHAR)).asEnumDataType(com.technokratos.model.jooq.enums.AccountState.class), this, "");

    /**
     * The column <code>public.account.role</code>.
     */
    public final TableField<AccountRecord, AccountRole> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'USER'::account_role", SQLDataType.VARCHAR)).asEnumDataType(com.technokratos.model.jooq.enums.AccountRole.class), this, "");

    /**
     * The column <code>public.account.first_name</code>.
     */
    public final TableField<AccountRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.account.last_name</code>.
     */
    public final TableField<AccountRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.account.gender</code>.
     */
    public final TableField<AccountRecord, Gender> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.technokratos.model.jooq.enums.Gender.class), this, "");

    /**
     * The column <code>public.account.about_me</code>.
     */
    public final TableField<AccountRecord, String> ABOUT_ME = createField(DSL.name("about_me"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.account.birth_date</code>.
     */
    public final TableField<AccountRecord, LocalDateTime> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.account.created_date</code>.
     */
    public final TableField<AccountRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.account.updated_date</code>.
     */
    public final TableField<AccountRecord, LocalDateTime> UPDATED_DATE = createField(DSL.name("updated_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT_ENTITY);
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT_ENTITY);
    }

    /**
     * Create a <code>public.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.ACCOUNT_PKEY;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.ACCOUNT_PKEY, Keys.ACCOUNT_EMAIL_KEY, Keys.ACCOUNT_USERNAME_KEY);
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, String, String, String, AccountState, AccountRole, String, String, Gender, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
