/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.tables;


import com.technokratos.model.jooq.Keys;
import com.technokratos.model.jooq.Public;
import com.technokratos.model.jooq.tables.records.SubscriberSubscriptionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriberSubscription extends TableImpl<SubscriberSubscriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subscriber_subscription</code>
     */
    public static final SubscriberSubscription SUBSCRIBER_SUBSCRIPTION_ENTITY = new SubscriberSubscription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriberSubscriptionRecord> getRecordType() {
        return SubscriberSubscriptionRecord.class;
    }

    /**
     * The column <code>public.subscriber_subscription.subscriber_id</code>.
     */
    public final TableField<SubscriberSubscriptionRecord, UUID> SUBSCRIBER_ID = createField(DSL.name("subscriber_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.subscriber_subscription.subscription_id</code>.
     */
    public final TableField<SubscriberSubscriptionRecord, UUID> SUBSCRIPTION_ID = createField(DSL.name("subscription_id"), SQLDataType.UUID.nullable(false), this, "");

    private SubscriberSubscription(Name alias, Table<SubscriberSubscriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubscriberSubscription(Name alias, Table<SubscriberSubscriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.subscriber_subscription</code> table reference
     */
    public SubscriberSubscription(String alias) {
        this(DSL.name(alias), SUBSCRIBER_SUBSCRIPTION_ENTITY);
    }

    /**
     * Create an aliased <code>public.subscriber_subscription</code> table reference
     */
    public SubscriberSubscription(Name alias) {
        this(alias, SUBSCRIBER_SUBSCRIPTION_ENTITY);
    }

    /**
     * Create a <code>public.subscriber_subscription</code> table reference
     */
    public SubscriberSubscription() {
        this(DSL.name("subscriber_subscription"), null);
    }

    public <O extends Record> SubscriberSubscription(Table<O> child, ForeignKey<O, SubscriberSubscriptionRecord> key) {
        super(child, key, SUBSCRIBER_SUBSCRIPTION_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SubscriberSubscriptionRecord> getPrimaryKey() {
        return Keys.SUBSCRIBER_SUBSCRIPTION_PKEY;
    }

    @Override
    public List<UniqueKey<SubscriberSubscriptionRecord>> getKeys() {
        return Arrays.<UniqueKey<SubscriberSubscriptionRecord>>asList(Keys.SUBSCRIBER_SUBSCRIPTION_PKEY);
    }

    @Override
    public List<ForeignKey<SubscriberSubscriptionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SubscriberSubscriptionRecord, ?>>asList(Keys.SUBSCRIBER_SUBSCRIPTION__SUBSCRIBER_SUBSCRIPTION_SUBSCRIBER_ID_FKEY, Keys.SUBSCRIBER_SUBSCRIPTION__SUBSCRIBER_SUBSCRIPTION_SUBSCRIPTION_ID_FKEY);
    }

    private transient Account _subscriberSubscriptionSubscriberIdFkey;
    private transient Account _subscriberSubscriptionSubscriptionIdFkey;

    public Account subscriberSubscriptionSubscriberIdFkey() {
        if (_subscriberSubscriptionSubscriberIdFkey == null)
            _subscriberSubscriptionSubscriberIdFkey = new Account(this, Keys.SUBSCRIBER_SUBSCRIPTION__SUBSCRIBER_SUBSCRIPTION_SUBSCRIBER_ID_FKEY);

        return _subscriberSubscriptionSubscriberIdFkey;
    }

    public Account subscriberSubscriptionSubscriptionIdFkey() {
        if (_subscriberSubscriptionSubscriptionIdFkey == null)
            _subscriberSubscriptionSubscriptionIdFkey = new Account(this, Keys.SUBSCRIBER_SUBSCRIPTION__SUBSCRIBER_SUBSCRIPTION_SUBSCRIPTION_ID_FKEY);

        return _subscriberSubscriptionSubscriptionIdFkey;
    }

    @Override
    public SubscriberSubscription as(String alias) {
        return new SubscriberSubscription(DSL.name(alias), this);
    }

    @Override
    public SubscriberSubscription as(Name alias) {
        return new SubscriberSubscription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriberSubscription rename(String name) {
        return new SubscriberSubscription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriberSubscription rename(Name name) {
        return new SubscriberSubscription(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
