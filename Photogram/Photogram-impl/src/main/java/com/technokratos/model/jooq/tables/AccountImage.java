/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.tables;


import com.technokratos.model.jooq.Keys;
import com.technokratos.model.jooq.Public;
import com.technokratos.model.jooq.tables.records.AccountImageRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountImage extends TableImpl<AccountImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_image</code>
     */
    public static final AccountImage ACCOUNT_IMAGE_ENTITY = new AccountImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountImageRecord> getRecordType() {
        return AccountImageRecord.class;
    }

    /**
     * The column <code>public.account_image.id</code>.
     */
    public final TableField<AccountImageRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.account_image.extension</code>.
     */
    public final TableField<AccountImageRecord, String> EXTENSION = createField(DSL.name("extension"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.account_image.size</code>.
     */
    public final TableField<AccountImageRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.account_image.account_id</code>.
     */
    public final TableField<AccountImageRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID, this, "");

    private AccountImage(Name alias, Table<AccountImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountImage(Name alias, Table<AccountImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.account_image</code> table reference
     */
    public AccountImage(String alias) {
        this(DSL.name(alias), ACCOUNT_IMAGE_ENTITY);
    }

    /**
     * Create an aliased <code>public.account_image</code> table reference
     */
    public AccountImage(Name alias) {
        this(alias, ACCOUNT_IMAGE_ENTITY);
    }

    /**
     * Create a <code>public.account_image</code> table reference
     */
    public AccountImage() {
        this(DSL.name("account_image"), null);
    }

    public <O extends Record> AccountImage(Table<O> child, ForeignKey<O, AccountImageRecord> key) {
        super(child, key, ACCOUNT_IMAGE_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountImageRecord> getPrimaryKey() {
        return Keys.ACCOUNT_IMAGE_PKEY;
    }

    @Override
    public List<UniqueKey<AccountImageRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountImageRecord>>asList(Keys.ACCOUNT_IMAGE_PKEY);
    }

    @Override
    public List<ForeignKey<AccountImageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountImageRecord, ?>>asList(Keys.ACCOUNT_IMAGE__ACCOUNT_IMAGE_ACCOUNT_ID_FKEY);
    }

    private transient Account _account;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.ACCOUNT_IMAGE__ACCOUNT_IMAGE_ACCOUNT_ID_FKEY);

        return _account;
    }

    @Override
    public AccountImage as(String alias) {
        return new AccountImage(DSL.name(alias), this);
    }

    @Override
    public AccountImage as(Name alias) {
        return new AccountImage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountImage rename(String name) {
        return new AccountImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountImage rename(Name name) {
        return new AccountImage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, Long, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
