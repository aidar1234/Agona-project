/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.tables.records;


import com.technokratos.model.jooq.tables.RefreshToken;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefreshTokenRecord extends UpdatableRecordImpl<RefreshTokenRecord> implements Record4<Long, UUID, LocalDateTime, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.refresh_token.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.refresh_token.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.refresh_token.name</code>.
     */
    public void setName(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.refresh_token.name</code>.
     */
    public UUID getName() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.refresh_token.expire</code>.
     */
    public void setExpire(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.refresh_token.expire</code>.
     */
    public LocalDateTime getExpire() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.refresh_token.account_id</code>.
     */
    public void setAccountId(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.refresh_token.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, UUID, LocalDateTime, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, UUID, LocalDateTime, UUID> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return RefreshToken.REFRESH_TOKEN_ENTITY.ID;
    }

    @Override
    public Field<UUID> field2() {
        return RefreshToken.REFRESH_TOKEN_ENTITY.NAME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return RefreshToken.REFRESH_TOKEN_ENTITY.EXPIRE;
    }

    @Override
    public Field<UUID> field4() {
        return RefreshToken.REFRESH_TOKEN_ENTITY.ACCOUNT_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getName();
    }

    @Override
    public LocalDateTime component3() {
        return getExpire();
    }

    @Override
    public UUID component4() {
        return getAccountId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getName();
    }

    @Override
    public LocalDateTime value3() {
        return getExpire();
    }

    @Override
    public UUID value4() {
        return getAccountId();
    }

    @Override
    public RefreshTokenRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value2(UUID value) {
        setName(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value3(LocalDateTime value) {
        setExpire(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value4(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public RefreshTokenRecord values(Long value1, UUID value2, LocalDateTime value3, UUID value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RefreshTokenRecord
     */
    public RefreshTokenRecord() {
        super(RefreshToken.REFRESH_TOKEN_ENTITY);
    }

    /**
     * Create a detached, initialised RefreshTokenRecord
     */
    public RefreshTokenRecord(Long id, UUID name, LocalDateTime expire, UUID accountId) {
        super(RefreshToken.REFRESH_TOKEN_ENTITY);

        setId(id);
        setName(name);
        setExpire(expire);
        setAccountId(accountId);
    }
}
