/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.tables;


import com.technokratos.model.jooq.Keys;
import com.technokratos.model.jooq.Public;
import com.technokratos.model.jooq.tables.records.RefreshTokenRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefreshToken extends TableImpl<RefreshTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.refresh_token</code>
     */
    public static final RefreshToken REFRESH_TOKEN_ENTITY = new RefreshToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefreshTokenRecord> getRecordType() {
        return RefreshTokenRecord.class;
    }

    /**
     * The column <code>public.refresh_token.id</code>.
     */
    public final TableField<RefreshTokenRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.refresh_token.name</code>.
     */
    public final TableField<RefreshTokenRecord, UUID> NAME = createField(DSL.name("name"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.refresh_token.expire</code>.
     */
    public final TableField<RefreshTokenRecord, LocalDateTime> EXPIRE = createField(DSL.name("expire"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.refresh_token.account_id</code>.
     */
    public final TableField<RefreshTokenRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    private RefreshToken(Name alias, Table<RefreshTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefreshToken(Name alias, Table<RefreshTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.refresh_token</code> table reference
     */
    public RefreshToken(String alias) {
        this(DSL.name(alias), REFRESH_TOKEN_ENTITY);
    }

    /**
     * Create an aliased <code>public.refresh_token</code> table reference
     */
    public RefreshToken(Name alias) {
        this(alias, REFRESH_TOKEN_ENTITY);
    }

    /**
     * Create a <code>public.refresh_token</code> table reference
     */
    public RefreshToken() {
        this(DSL.name("refresh_token"), null);
    }

    public <O extends Record> RefreshToken(Table<O> child, ForeignKey<O, RefreshTokenRecord> key) {
        super(child, key, REFRESH_TOKEN_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<RefreshTokenRecord, Long> getIdentity() {
        return (Identity<RefreshTokenRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RefreshTokenRecord> getPrimaryKey() {
        return Keys.REFRESH_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<RefreshTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<RefreshTokenRecord>>asList(Keys.REFRESH_TOKEN_PKEY, Keys.REFRESH_TOKEN_ACCOUNT_ID_KEY);
    }

    @Override
    public List<ForeignKey<RefreshTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefreshTokenRecord, ?>>asList(Keys.REFRESH_TOKEN__REFRESH_TOKEN_ACCOUNT_ID_FKEY);
    }

    private transient Account _account;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.REFRESH_TOKEN__REFRESH_TOKEN_ACCOUNT_ID_FKEY);

        return _account;
    }

    @Override
    public RefreshToken as(String alias) {
        return new RefreshToken(DSL.name(alias), this);
    }

    @Override
    public RefreshToken as(Name alias) {
        return new RefreshToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(String name) {
        return new RefreshToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(Name name) {
        return new RefreshToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, UUID, LocalDateTime, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
